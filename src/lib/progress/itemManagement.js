// Gesti√≥n de √≠tems de pr√°ctica en el sistema de progreso

import { saveItem, getItemByProperties } from './database.js'
import { VERBS } from '../../data/verbs.js'

/**
 * Inicializa los √≠tems de pr√°ctica en el sistema de progreso
 * @returns {Promise<void>}
 */
export async function initializeItems() {
  console.log('üîÑ Inicializando √≠tems de pr√°ctica...')
  
  try {
    let itemCount = 0
    let skippedCount = 0
    
    // Procesar cada verbo
    for (const verb of VERBS) {
      // Procesar cada paradigma del verbo
      for (const paradigm of verb.paradigms || []) {
        // Procesar cada forma del paradigma
        for (const form of paradigm.forms || []) {
          try {
            // Verificar si el √≠tem ya existe
            const existingItem = await getItemByProperties(
              verb.id || `verb-${verb.lemma}`,
              form.mood,
              form.tense,
              form.person
            )
            
            // Si no existe, crearlo
            if (!existingItem) {
              const item = {
                id: `item-${verb.lemma}-${form.mood}-${form.tense}-${form.person}`,
                verbId: verb.id || `verb-${verb.lemma}`,
                mood: form.mood,
                tense: form.tense,
                person: form.person
                // En una implementaci√≥n completa, aqu√≠ se a√±adir√≠an m√°s propiedades
                // como regi√≥n, dificultad, etc.
              }
              
              await saveItem(item)
              itemCount++
            } else {
              skippedCount++
            }
          } catch (error) {
            console.error(`‚ùå Error al inicializar √≠tem para ${verb.lemma} ${form.mood}/${form.tense}/${form.person}:`, error)
          }
        }
      }
    }
    
    console.log(`‚úÖ Inicializaci√≥n de √≠tems completada: ${itemCount} creados, ${skippedCount} ya existentes`)
  } catch (error) {
    console.error('‚ùå Error al inicializar √≠tems:', error)
    throw error
  }
}

/**
 * Obtiene o crea un √≠tem de pr√°ctica
 * @param {string} verbId - ID del verbo
 * @param {string} mood - Modo
 * @param {string} tense - Tiempo
 * @param {string} person - Persona
 * @returns {Promise<Object>} √çtem de pr√°ctica
 */
export async function getOrCreateItem(verbId, mood, tense, person) {
  // Buscar √≠tem existente
  let item = await getItemByProperties(verbId, mood, tense, person)
  
  // Si no existe, crearlo
  if (!item) {
    item = {
      id: `item-${verbId}-${mood}-${tense}-${person}`,
      verbId,
      mood,
      tense,
      person
    }
    
    await saveItem(item)
  }
  
  return item
}

/**
 * Obtiene √≠tems por celda (modo-tiempo-persona)
 * @param {string} mood - Modo
 * @param {string} tense - Tiempo
 * @param {string} person - Persona
 * @returns {Promise<Array>} √çtems de la celda
 */
export async function getItemsByCell(mood, tense, person) {
  // En una implementaci√≥n completa, esto buscar√≠a en la base de datos
  // todos los √≠tems que coincidan con la celda especificada
  
  // Por ahora, devolvemos un array vac√≠o
  return []
}

/**
 * Obtiene √≠tems por verbo
 * @param {string} verbId - ID del verbo
 * @returns {Promise<Array>} √çtems del verbo
 */
export async function getItemsByVerb(verbId) {
  // En una implementaci√≥n completa, esto buscar√≠a en la base de datos
  // todos los √≠tems asociados a un verbo espec√≠fico
  
  // Por ahora, devolvemos un array vac√≠o
  return []
}

/**
 * Actualiza un √≠tem existente
 * @param {string} itemId - ID del √≠tem
 * @param {Object} updates - Actualizaciones
 * @returns {Promise<void>}
 */
export async function updateItem(itemId, updates) {
  try {
    // En una implementaci√≥n completa, esto actualizar√≠a el √≠tem existente
    
    console.log(`‚úÖ √çtem ${itemId} actualizado`)
  } catch (error) {
    console.error(`‚ùå Error al actualizar √≠tem ${itemId}:`, error)
    throw error
  }
}

/**
 * Elimina un √≠tem del sistema
 * @param {string} itemId - ID del √≠tem
 * @returns {Promise<void>}
 */
export async function removeItem(itemId) {
  try {
    // En una implementaci√≥n completa, esto eliminar√≠a el √≠tem
    
    console.log(`‚úÖ √çtem ${itemId} eliminado`)
  } catch (error) {
    console.error(`‚ùå Error al eliminar √≠tem ${itemId}:`, error)
    throw error
  }
}

/**
 * Verifica si un √≠tem existe
 * @param {string} verbId - ID del verbo
 * @param {string} mood - Modo
 * @param {string} tense - Tiempo
 * @param {string} person - Persona
 * @returns {Promise<boolean>} Si el √≠tem existe
 */
export async function itemExists(verbId, mood, tense, person) {
  const item = await getItemByProperties(verbId, mood, tense, person)
  return item !== null
}

/**
 * Crea √≠tems masivamente
 * @param {Array} items - Array de √≠tems a crear
 * @returns {Promise<void>}
 */
export async function createItemsBulk(items) {
  try {
    // En una implementaci√≥n completa, esto crear√≠a m√∫ltiples √≠tems
    // en una sola transacci√≥n para mejor rendimiento
    
    console.log(`‚úÖ ${items.length} √≠tems creados masivamente`)
  } catch (error) {
    console.error('‚ùå Error al crear √≠tems masivamente:', error)
    throw error
  }
}