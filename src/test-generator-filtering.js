#!/usr/bin/env node

// Test del filtrado por grupos en el generador
import { categorizeVerb } from './lib/irregularFamilies.js'
import { expandSimplifiedGroup, getSimplifiedGroupForVerb } from './lib/simplifiedFamilyGroups.js'

console.log('üß™ Testing Generator Filtering Logic\n')

// Simular la nueva l√≥gica del generador
function simulateGeneratorFiltering(verb, selectedFamily, tense) {
  const verbFamilies = categorizeVerb(verb)
  
  // Check if it's a simplified group that needs expansion
  const expandedFamilies = expandSimplifiedGroup(selectedFamily)
  if (expandedFamilies.length > 0) {
    // It's a simplified group - use priority-based classification
    const verbGroup = getSimplifiedGroupForVerb(verbFamilies, tense)
    return verbGroup === selectedFamily
  } else {
    // It's a regular family - check direct match
    return verbFamilies.includes(selectedFamily)
  }
}

const selectedFamily = 'PRETERITE_THIRD_PERSON'
const tense = 'pretIndef'

// Verbos que NO deber√≠an aparecer (irregulares fuertes)
const shouldNotAppear = [
  'traer',    // Irregular fuerte (traje, trajiste, trajo...)
  'caer',     // Irregular fuerte (ca√≠, ca√≠ste, cay√≥...)
  'o√≠r',      // Irregular fuerte (o√≠, o√≠ste, oy√≥...)
  'decir',    // Irregular fuerte (dije, dijiste, dijo...)
  'hacer',    // Irregular fuerte (hice, hiciste, hizo...)
  'venir',    // Irregular fuerte (vine, viniste, vino...)
  'poner',    // Irregular fuerte (puse, pusiste, puso...)
  'tener',    // Irregular fuerte (tuve, tuviste, tuvo...)
]

// Verbos que S√ç deber√≠an aparecer (irregulares solo en 3¬™ persona)
const shouldAppear = [
  'pedir',      // e‚Üíi: pidi√≥, pidieron
  'servir',     // e‚Üíi: sirvi√≥, sirvieron  
  'repetir',    // e‚Üíi: repiti√≥, repitieron
  'seguir',     // e‚Üíi: sigui√≥, siguieron
  'dormir',     // o‚Üíu: durmi√≥, durmieron
  'morir',      // o‚Üíu: muri√≥, murieron
  'leer',       // hiato: ley√≥, leyeron
  'creer',      // hiato: crey√≥, creyeron
  'construir',  // hiato: construy√≥, construyeron
  'destruir',   // hiato: destruy√≥, destruyeron
]

console.log('=== Nueva l√≥gica del generador ===\n')

console.log('1. Verbos que NO deber√≠an aparecer en "Irregulares en 3¬™ persona":')
let correctlyExcluded = 0
for (const verb of shouldNotAppear) {
  const verbFamilies = categorizeVerb(verb)
  const passes = simulateGeneratorFiltering(verb, selectedFamily, tense)
  const verbGroup = getSimplifiedGroupForVerb(verbFamilies, tense)
  
  const status = !passes ? '‚úÖ CORRECTO' : '‚ùå ERROR'
  console.log(`   ${verb}: ${status} (grupo: ${verbGroup}, pasa filtro: ${passes})`)
  
  if (!passes) correctlyExcluded++
}

console.log(`\n   Resultado: ${correctlyExcluded}/${shouldNotAppear.length} correctamente excluidos\n`)

console.log('2. Verbos que S√ç deber√≠an aparecer en "Irregulares en 3¬™ persona":')
let correctlyIncluded = 0
for (const verb of shouldAppear) {
  const verbFamilies = categorizeVerb(verb)
  const passes = simulateGeneratorFiltering(verb, selectedFamily, tense)
  const verbGroup = getSimplifiedGroupForVerb(verbFamilies, tense)
  
  const status = passes ? '‚úÖ CORRECTO' : '‚ùå ERROR'
  console.log(`   ${verb}: ${status} (grupo: ${verbGroup}, pasa filtro: ${passes})`)
  
  if (passes) correctlyIncluded++
}

console.log(`\n   Resultado: ${correctlyIncluded}/${shouldAppear.length} correctamente incluidos\n`)

console.log('=== Comparaci√≥n con l√≥gica anterior ===\n')

console.log('3. Comparaci√≥n para verbos problem√°ticos:')
const problemVerbs = ['traer', 'decir', 'caer', 'o√≠r']
const expandedFamilies = expandSimplifiedGroup(selectedFamily)

for (const verb of problemVerbs) {
  const verbFamilies = categorizeVerb(verb)
  
  // L√≥gica anterior (problem√°tica)
  const oldLogic = expandedFamilies.some(familyId => verbFamilies.includes(familyId))
  
  // Nueva l√≥gica (con prioridades) 
  const newLogic = simulateGeneratorFiltering(verb, selectedFamily, tense)
  
  const improvement = oldLogic && !newLogic ? '‚úÖ MEJORADO' : oldLogic === newLogic ? '‚ö™ SIN CAMBIO' : '‚ùì REVISAR'
  
  console.log(`   ${verb}:`)
  console.log(`     L√≥gica anterior: ${oldLogic ? 'APARECE' : 'NO APARECE'}`)
  console.log(`     Nueva l√≥gica:    ${newLogic ? 'APARECE' : 'NO APARECE'} ${improvement}`)
  console.log()
}

const totalCorrect = correctlyExcluded + correctlyIncluded
const totalTests = shouldNotAppear.length + shouldAppear.length
console.log(`üéØ Resultado final: ${totalCorrect}/${totalTests} tests correctos (${Math.round(totalCorrect/totalTests*100)}%)`)